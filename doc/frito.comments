Title: Game

## Goals

I wrote this up from a top-down approach, since AFAIK, we didn't have any
specific ideas nailed down.

I'm not expecting us to plan the game out from scratch. I think we should select
a few of the genres or skillsets (or some other characteristics) for a game we'd
like to build. From those choices, we can decide on what we could put together
in 2 weeks.

At that point, we look at what we have, see what we'd like to complete for the
next iteration, and go to the next 2 week period. After each iteration, we
should have moved closer to what we want from our game.

Pacing ourselves while keeping things moving towards our goal may be the most
important step.

## Design

This section discusses the play and mechanics of the game.

### Genre

Genre is probably the easiest place to start. Any given game has a lot of
overlap in genre, but here's a sampling:

* RTS
* FPS
* Puzzle
* MMO
* Dota (Arena-style)
* Sandbox
* Simulation

### Skillset

Another way to look at games would be the charactersistics of an ideal player:

* Accuracy/timeliness, as is found in shooters
* Memorization/repetition (endurance?), as is found in DPS rotations, Starcraft
  openings
* Grand strategy/abstraction, as is found in chess, battlegrounds
* Creativity/experimentation, as is found in Minecraft

As was true with genres, games have a lot of overlap in these skillsets. I think
we can generate some useful characteristics of our game if we consider what
skillsets we expect or reward in our playerbase.

## Economics

Do we want to make money off the game? I vote yes. I'd like for as much of it to
be open-source as possible, but I also want a revenue stream. This decision
affects what kind of game we make as well as the priorities we have in making
it.

Here's some methods for payment:

* Subscription (WoW)
* One-time payment (Minecraft)
* Microtransactions (LoL)
* Rent-A-Server (Ventrilo)

I wanted to write some guesstimates here regarding pricing and expected
earnings, but it's definitely not a trivial task to find that stuff out. It
depends at least on the genre of game, and our personal choice regarding the
scope of the project.

It's important that our game is either distinctive enough to separate from
competition, or good enough that it outshadows the competition. Creating
something generic like an FPS would be very difficult to make profitable, while
creating a unique game would be easier, since the quality of competition is much
different.

## Resources

This section discusses the logistics and experience for this project.

### Programming

You, me, and Weet all have programming experience. You and me know Lua. I know
C++ pretty well and Java very well.

### Artwork, multimedia

Wrae's a very talented artist, and she'd love to draw up stuff for a game.
Weet's also got some chops with Photoshop. I've also been known to draw.

### Web presence

Wrae and I could probably create/maintain a web presence fairly easily. It'd be
orthogonal to the game itself, but it's necessary work. I think Weet's done some
work with this sort of thing too.

### Money, legal

Too early to worry about at this point, but if we wanted to make money off the
game, we'd probably need to incorporate. Even if we provided it for free, we'd
have to start dishing out money if it got popular.

### Development Infrastructure

Our server, along with Github or Unfuddle, should provide the necessary
infrastructure to develop this project.

### Time/Commitment

My schedule isn't too demanding, so I have time, especially on the weekends,
that I could spend on something like this. Once my sleep cycle settles, I'll
have a lot more overlapping hours with you.

It's imperative we build this project iteratively, since there's a lot of
uncertainty ahead. I got decent experience about how to work this way,
especially as a part of a team.

## Engineering

This section discusses technical aspects of this project.

### Programming Language

I think a two-language approach would work well for us. One language would
be low-level: it would provide the engine for the game. The other language would
be high-level: it would provide the mechanics and host the more experimental
features. This approach lets us prototype features in the high-level language,
and once they're solid, we can rewrite them in the low-level language for
performance.

My choices for the languages would be C++ and Lua.

### Why not Java

I know Java very well, Internet support comes more or less out-of-the-box with
Java (as Minecraft proved), and there's a solid OpenGL implementation for Java.
Java also provides portability for free. Java also provides good networking and
very good threading support, which we'll very likely need down the road.

However, Java has a few fairly major downsides:

* Java is very verbose, for no good reason, really. This makes it a pain to code
  in, unless you do some relatively ugly stuff.

* Since we're programming a game, Java's performance would be a fairly constant
  issue. Crossing inter-language boundaries, namely Lua-Java and Java-OpenGL,
  would add up since we'd be doing them so often. These boundaries wouldn't
  exist in a C++ world, since Lua and OpenGL are both native to C.

* Java's Lua support is not that great. Its support for dynamic languages is
  also still rather poor.

* A game typically requires low-level access to hardware and to libraries. This
  is partially because they do a lot of creative things that higher-level stuff
  doesn't anticipate, and also because low-level access provides better
  performance. As a result, we're not going to use a lot of the libraries that
  come with Java. As a result, Java's greatest strength - a huge standard
  library - is something we just skip altogether.

* We can minimize portability costs by using portable libraries, such as OpenGL.
  We'll still need to do more work in C++ to get a portable game, compared to
  Java, but I don't think that effort will be significant enough to warrant us
  choosing Java over C++.

#### Lua

The high-level language is almost certainly Lua. It's a language we both know,
it's very fast relative to other dynamic languages (e.g. Ruby, Python, Perl),
and I'm familiar with incorporating it into both Java and C++.

Other contenders would be Python, Ruby, or perhaps JavaScript. While there's
some tradeoffs with these languages, I don't think they offset the experience we
both have with Lua.

### Graphics

As far as graphics are concerned, OpenGL is the way to go. There's frameworks
out there that provide higher-level access to OpenGL, but I don't think they're
worth the effort required to learn them.

OpenGL doesn't provide out-of-the-box font rendering. It's actually not that
difficult to write our own font engine, but there's toolkits out there that
would provide it for free. Cairo is probably the best bet for this, since it
also provides lots of nifty 2D things that we could use, as well as a top-shelf
font rendering engine.

### Sound

Not familiar with sound engines. OpenAL comes to mind?

<!-- vim: set ft=markdown tw=80 :-->
